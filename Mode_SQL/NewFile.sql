--1. Write a query to select all of the columns in the tutorial.us_housing_units table without using *.

SELECT year, month, month_name, south ,west, midwest,northeast
FROM tutorial.housing_units

--2. Write a query to select all of the columns in tutorial.us_housing_units and rename them so that their first letters are capitalized.

SELECT year AS "Year", month as "Month", month_name as "Month_Name", west as "west", midwest as "Midwest",south as "South", northeast as "Northeast"
FROM tutorial.us_housing_units

--3. Write a query that uses the LIMIT command to restrict the result set to only 15 rows.
SELECT *
FROM tutorial.us_housing_units
LIMIT 15

--4. Did the West Region ever produce more than 50,000 housing units in one month?
SELECT *
FROM tutorial.us_housing_units
WHERE west > 50

--5. Did the South Region ever produce 20,000 or fewer housing units in one month?
SELECT *
FROM tutorial.us_housing_units
WHERE south <= 20

--Equal to	=
--Not equal to	<> or !=
--Greater than	>
--Less than	<
--Greater than or equal to	>=
--Less than or equal to	<=

--6. Write a query that only shows rows for which the month name is February.
SELECT *
FROM tutorial.us_housing_units
WHERE month_name = 'February'

--7. Write a query that only shows rows for which the month_name starts with the letter "N" or an earlier letter in the alphabet.
SELECT *
FROM tutorial.us_housing_units
WHERE month_name < 'o'


--The above example produces a column showing the sum of whatever is in the south and west columns for each row.
-- You can chain arithmetic functions, including both column names and actual numbers:

SELECT year,
       month,
       west,
       south,
       west + south AS south_plus_west
  FROM tutorial.us_housing_units

--The columns that contain the arithmetic functions are called "derived columns" because 
--they are generated by modifying the information that exists in the underlying data.

SELECT year,
       month,
       west,
       south,
       west + south - 4 * year AS nonsense_column
  FROM tutorial.us_housing_units


 --8.Write a query that calculates the sum of all four regions in a separate column.
SELECT year, month, month_name,west,south,midwest,northeast, west + south +midwest +northeast as Total
FROM tutorial.us_housing_units

--9. Write a query that returns all rows for which more units were produced in the West region than in the Midwest and Northeast combined.
SELECT year, month, month_name,west,south,midwest,northeast
FROM tutorial.us_housing_units
WHERE west > (midwest + northeast)

--10. Write a query that calculates the percentage of all houses completed in the United States represented by each region. Only return results from the year 2000 and later.
SELECT year,
       month,
       west/(west + south + midwest + northeast)*100 AS west_pct,
       south/(west + south + midwest + northeast)*100 AS south_pct,
       midwest/(west + south + midwest + northeast)*100 AS midwest_pct,
       northeast/(west + south + midwest + northeast)*100 AS northeast_pct
  FROM tutorial.us_housing_units
 WHERE year >= 2000

 --11. Write a query that returns all rows for which Ludacris was a member of the group.
 SELECT *
 FROM tutorial.billboard_top_100_year_end
 WHERE "group_name" ilike '%ludacris%'

--12. Write a query that returns all rows for which the first artist listed in the group has a name that begins with "DJ".
SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE artist ilike 'DJ%'

--13. Write a query that shows all of the entries for Elvis and M.C. Hammer.
SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE artist IN ('M.C. Hammer','Hammer','Elvis Presley')

--14. Write a query that shows all top 100 songs from January 1, 1985 through December 31, 1990.
SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE year BETWEEN 1985 and 1990

--15. Write a query that shows all of the rows for which song_name is null.
SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE song_name is NULL

--16. Write a query that surfaces all rows for top-10 hits for which Ludacris is part of the Group.
SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE year_rank <=10
AND "group_name" ilike '%ludacris%'

--17.Write a query that surfaces the top-ranked records in 1990, 2000, and 2010.
SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE year_rank = 1
And year IN (1990, 2000, 2010)

--18. Write a query that lists all songs from the 1960s with "love" in the title.
SELECT *
FROM tutorial.billboard_top_100_year_end
Where year between 1960 and 1969
And song_name ilike '%love%'

--19. Write a query that returns all rows for top-10 songs that featured either Katy Perry or Bon Jovi.
SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE year_rank <=10
And ("artist" ilike '%katy perry%' OR "artist" ilike '%bon jovi%')


--20. Write a query that returns all songs with titles that contain the word "California" in either the 1970s or 1990s.
SELECT *
From tutorial.billboard_top_100_year_end
WHERE song_name ilike '%California%'
And (year between 1970 and 1979 OR year between 1990 and 1999)

--21. Write a query that lists all top-100 recordings that feature Dr. Dre before 2001 or after 2009.
SELECT *
FROM tutorial.billboard_top_100_year_end
 WHERE "group_name" ILIKE '%dr. dre%'
AND (year <= 2000 OR year >= 2010)

-- 22.Write a query that returns all rows for songs that were on the charts in 2013 and do not contain the letter "a".
SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE year = 2013
And song_name NOT ilike '%a%'

--23. Write a query that returns all rows from 2012, ordered by song title from Z to A.
SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE year = 2012
ORDER BY song_name desc

--24. Write a query that returns all rows from 2010 ordered by rank, with artists ordered alphabetically for each song.
SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE year = 2010 
ORDER BY year_rank, artist

--25. Write a query that shows all rows for which T-Pain was a group member, ordered by rank on the charts, from lowest to highest rank (from 100 to 1).
SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE "group_name" ilike '%T-Pain%'
ORDER BY year_rank desc

--26. Write a query that returns songs that ranked between 10 and 20 (inclusive) in 1993, 2003, or 2013. Order the results by year and rank, and leave a comment on each line of the WHERE clause to indicate what that line does
SELECT *
FROM tutorial.billboard_top_100_year_end
WHERE year IN (1993,2003,2013)
AND year_rank BETWEEN 10 and 20
ORDER BY year, year_rank

--27. 

